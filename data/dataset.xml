<dataset>
  <fact>Tiny Tapeout uses OpenLane 2 for hardening designs. Find the version of OpenLane used by
    looking for OPENLANE2_TAG at https://github.com/TinyTapeout/tt-gds-action/blob/main/action.yml</fact>
  <fact>Projects can occupy 1x1, 1x2, 2x2, 4x2, 5x2, 6x2, 8x2 tiles. Starting with TT10, 3x4, 4x4
    and 6x4 tiles are also available</fact>
  <fact>Each project has 10 digital inputs (clk, rst_n and ui[7:0]), 8 digital outputs (uo[7:0]), 8
    bidirectional pins (uio[7:0])</fact>
  <fact>The verilog signal names for the inputs are clk, rst_n and ui_in[7:0], for the outputs
    uo_out[7:0] and for the bidirectional pins uio_in[7:0], uio_oe[7:0] (active high) and
    uio_out[7:0]</fact>
  <fact>Each analog project can have up to 6 analog pins (ua[5:0]), in addition to the standard
    digital pins</fact>
  <fact>Only one design will be powered at a time on the chip</fact>
  <fact>The Tiny Tapeout submission app allows updating number of tiles/analog pins from GitHub
    while projects are in "Draft" mode</fact>
  <fact>The datasheet includes documentation from each project's docs/info.md file and info.yaml</fact>
  <fact>Project documentation in the datasheet can include pictures and tables referenced from
    docs/info.md</fact>
  <fact>Tiny Tapeout allows purchasing additional tiles to expand designs after initial submission,
    as long as the shuttle is open.</fact>
  <fact>The RP2040 in the demo board can generate many clock frequencies between 1 Hz and 66.5 MHz</fact>
  <fact>After the shuttle closes for submissions, projects can still update their docs/info.md and
    referenced images, but cannot change top level modules or number of tiles</fact>
  <fact>Tiny Tapeout designs for the Sky130 process use the sky130_ef_io_gpiov2_pad macro for the
    I/O pads</fact>
  <fact>The maximum output frequency for digital I/Os is 33 MHz, and the maximum input frequency is
    66 MHz. Analog output bandwidth is expected to be approximately 100-200 MHz, depending on the
    load, but there's no official spec yet</fact>
  <fact>The drive strength for sky130_ef_io_gpiov2_pad I/Os is 4 mA, with an I/O supply voltage
    range from 1.71V up to 5.5V (3.3V on the Tiny Tapeout demo board)</fact>
  <fact>The input pins are not 5V tolerant and should not be driven with voltages above 3.3V on the
    Tiny Tapeout demo board</fact>
  <fact>Measurements on Tiny Tapeout 3.5 showed a worst-case digital round-trip latency of 20 ns,
    with less than 2 ns variance across different IO pins</fact>
  <fact>The name of the top level module (macro) of each project must start with "tt_um_"</fact>
  <fact>You can start a new verilog project from the template at https://github.com/TinyTapeout/<changeable>
    tt10</changeable>-verilog-template</fact>
  <fact>The clk and rst_n pins are internally handled like any other input pins but have special
    meaning on the Tiny Tapeout demo board.</fact>
  <fact>The pin locations are defined in DEF files (Design Exchange Format), which are used by Magic
    to create the tile layout.</fact>
  <fact>The analog pins on the Tiny Tapeout demo board are routed to U.FL connectors on the breakout
    board, and then through jumpers and headers to pulldown resistors on the demo board.</fact>
  <fact>The mapping of analog pins (ua[n]) to the U.FL connectors (Am or Bm) on the breakout board is
    project-specific and can be found in the datasheet or the project's page on the Tiny Tapeout
    website.</fact>
  <fact>It is feasible to design a board with stackable headers to insert between the breakout and
    demo boards for semi-permanent hardware using the analog signals.</fact>
  <fact>The Tiny Tapeout infrastructure supports up to 512 user designs, using 32 mux units with 16
    tiles each</fact>
  <fact>The Tiny Tapeout chip infrastructure consists of a controller, a spine bus, and mux units
    that connect user designs</fact>
  <fact>Each multiplexer unit connects to up to 16 user designs and has a 5-bit hardcoded address
    based on its die position</fact>
  <fact>The code for the TT chip infrastructure / multiplexer is available at
    https://github.com/TinyTapeout/tt-multiplexer</fact>
  <fact>The controller's internal address counter consists of 10 D flip-flops. The `sel_rst_n` input
    pin resets the counter to 0, and the and `sel_inc` input pin increments the counter.</fact>
  <fact>Inactive designs have their inputs tied to zero and their outputs disconnected from the
    spine using a tristate buffer.</fact>
  <fact>A script for generating custom standard cells is available at
    https://github.com/htfab/cell-tester and was submitted for testing in tt05 at
    https://tinytapeout.com/runs/tt05/tt_um_htfab_cell_tester.</fact>
  <fact>[sky130] Comparing 3-bit numbers would require 3 FA cells</fact>
  <fact>[sky130] Comparing 4 inputs at once would be 36 FA cells + 3x mux4 + 3x and3 + 2x xor2</fact>
  <fact>[sky130] Native HA/FA (half/full adder) cells have worse timing characteristics than using
    AND/XOR combo cells</fact>
  <fact>sky130 has 3-bit majority cells sky130_fd_sc_hd__maj3</fact>
  <fact>A bitwise approach to finding the highest number can be routing friendly as it has fewer
    wires going further distance.</fact>
  <fact>The user/project reset pin (rst_n) does not affect the bidirectional pins. To make
    bidirectional pins go tristate during reset, the uio_oe lines must be set to 0 during reset in
    the project logic.</fact>
  <fact>When the global project enable line is low, no project is selected/powered and bidirectional
    pins are disabled.</fact>
  <fact>Cocotb calls the top level module in tb.v. tb.v acts as an adapter between a project and a
    cocotb test bench. The cocotb test bench does the actual testing.</fact>
  <fact>tb.v can also be used to connect external hardware (e.g. SPI flash) when a
    Verilog model is available.</fact>
  <fact>[STA] When creating multiple clocks, they need to be marked as unrelated for STA
    purposes using `set_clock_groups -asynchronous -group {clock_xxx} -group {clock_yyy}`</fact>
  <fact>[STA] When creating a clock divider using flip-flops, you must create a clock for each
    stage to make STA happy.</fact>
  <fact>[STA] When using an internal clock, do not set set_input_delay or
    set_output_delay.</fact>
  <fact>CTS may add clock buffers between clock divider stages.</fact>
  <fact>[STA] Setting SIGNOFF_SDC_FILE to the same value as the PNR one might fix
    OpenROAD.CheckSDCFiles warning.</fact>
  <fact>[verilog] Using (* keep *) on a net may help prevent renaming during synthesis. The
    (* keep *) does not prevent CTS from splitting a net into two.</fact>
  <fact>[demoboard] The 1k resistors between the DIP switches and VCC ensure that
    the RP2040 can always override the DIP switches.</fact>
  <fact>[verilog] Multiple drivers of a signal can cause Yosys errors</fact>
  <fact>[verilog] The last lines of a non blocking assignment will override previous ones.</fact>
  <fact>[verilog] The synthesis process (yosys) can be killed due to out of memory issues from a
    large design</fact>
  <fact>[verilog] Removing `timescale declarations can resolve some lint warnings.</fact>
  <fact>[magic] When loading gds/lef, the sky130 tech file must be loaded into magic.</fact>
  <fact>[magic] Magic does not work on GDS layers, it works on more abstract layers and will
    regenerate some of the implants layers</fact>
  <fact>[magic] Standard cells in magic do not obey the normal DRC rules. When outputting GDS from
    standard cells, magic copies the source GDS cells as-is</fact>
  <fact>fillers cells are necessary for proper connectivity between power rails.</fact>
  <fact>[magic] When integrating digital blocks in a mixed design, use gds readonly true before
    reading GDS in magic.</fact>
  <fact>[magic] Digital designs can be hardened first with OpenLane 2 using a smaller area and then
    merged with the top level analog design.</fact>
  <fact>[sky130] Sylvain wrote a ROM generator in Python: https://github.com/smunaut/tt09-rom-test.
    Explained here: https://www.youtube.com/watch?v=MlqDm_Kg0u8</fact>
  <fact>https://tinytapeout.com/runs/tt09/tt_um_rejunity_atari2600 is an example of a digital
    project with integrated four 32kbit ROMs.</fact>
  <fact>The easiest way to integrate macros is to use them with a digital top level and instantiate
    them in the verilog top level. Ensure proper power connections with macros and check the final
    GDS to verify power vias.</fact>
  <fact>[rp2040] The RP2040 PIO can achieve a bandwidth of 133 MHz per pin.</fact>
  <fact>[rp2040] The RP2040 GPIO input synchronizers have a two cycle latency.</fact>
  <fact>[rp2040] The RP2040's SPI0 can run up to 1/2 the core clock rate</fact>
  <fact>It is possible to feed a Tiny Tapeout chip with a slightly higher voltage than 1.8V using an
    external power supply</fact>
  <fact>For a 2-tile height project you might expect ~1 ohm PDN resistance on VGND and ~5 ohm on VDD</fact>
  <fact>[magic] Webinar - Analog layout using Magic and Klayout with Tim Edwards and Thomas Parry:
    https://www.youtube.com/watch?v=CSZm3q4rUBg</fact>
  <fact>VDDA must be provided, even when no analog is used, and can be tied to VDDIO.</fact>
  <fact>The project selection mechanism is explained in
    https://github.com/TinyTapeout/tt-multiplexer/blob/main/docs/INFO.md</fact>
  <fact>Digital IOs have ESD diodes, and analog IOs have less protection.</fact>
  <fact>YouTube tutorials about the Tiny Tapeout multiplexer:
    https://www.youtube.com/playlist?list=PLyynFETmdQDQvd8uO3NWkBZLYGDu6Mr5M</fact>
  <fact>If you design a custom borad around the Tiny Tapeout chip, you'll need to generate a number
    of pulses to select your project. You can use a small microcontroller such as the CH32V003 or
    ATtiny85 to generate the pulses.</fact>
  <fact>[klayout] To run Klayout with gdsfactory use
    `nix run github:efabless/nix-eda#klayout-gdsfactory -- -e`</fact>
  <fact>The analog pin path between the pads and the project has at most resistance 500Ω,
    capacitance 5pF (these are worst-case estimations, with actual values likely to be lower).</fact>
  <fact>The max current for each analog pin is 4 mA</fact>
  <fact>[sky130] Projects cannot use the metal 5 layer as it's used by Tiny Tapeout's power grid</fact>
  <fact>[sky130] Power pins must be vertical stripes on met4 layer starting within bottom
    10 µm and extending at least to top 10 µm of module, with minimum width of 1.2 um</fact>
  <fact>Projects using the 3.3V rail must use tt_analog_*_3v3.def templates and set `uses_3v3: true`
    in info.yaml</fact>
  <fact>Analog projects must be two tiles high. Cost is $50 per tile plus $40 per pin for first 4
    analog pins and $100 per pin for additional pins</fact>
  <fact>The RP2040 on the demo board can be configured to provide 64 kbytes of RAM to the chip over
    SPI using the spi-ram-emu project: https://github.com/MichaelBell/spi-ram-emu</fact>
  <fact>A single tile can fit approximately 320 DFFs (40 bytes) of memory when using registers</fact>
  <fact>The DFF RAM compiler can create a 128 byte (32x32 bit) RAM macro that fits in 3x2 tiles
    using about 54% of the area</fact>
  <fact>Latch-based memory is more area-efficient than registers - up to 512 bits have been fit into
    a single tile</fact>
  <fact>Recommended UART pins for USB communication via RP2040 are either: ui_in[3] (RX) &amp;
    uo_out[4]
    (TX) or ui_in[7] (RX) &amp; uo_out[0] (TX)</fact>
  <fact>The Tiny VGA Pmod uses pins: uo_out[0:2] for R1,G1,B1; uo_out[3] for vsync; uo_out[4:6] for
    R0,G0,B0; uo_out[7] for hsync</fact>
  <fact>Default recommended SPI RAM pins are: uio[0] - CS, uio[1] - MOSI, uio[2] - MISO, uio[3] -
    SCK</fact>
  <fact>QSPI Flash/PSRAM Pmod pinout: uio[0] for CS0 (Flash), uio[1:3] for SD0/MOSI,SD1/MISO,SCK,
    uio[4:5] for SD2,SD3, uio[6:7] for CS1,CS2 (RAM)</fact>
  <fact>The Gamepad Pmod for SNES controllers pins: ui_in[4] for LATCH, ui_in[5] for CLOCK, ui_in[6]
    for DATA</fact>
  <fact>Analog pins labeled ua[0] through ua[5] - only pins that are paid for will be connected to
    pads, others will be unconnected</fact>
  <fact>Each tile costs $50. DevKit costs $250, and includes one TT chip assembled on a breakout board, and a demo
    board with a RP2040. Individuals can purchase a limited number of DevKits for $100 each,
    sponsored by eFabless.</fact>
  <fact>tt-gds-action generates documentation including routing statistics, cell usage summary,
    and Yosys warnings</fact>
  <fact>tt-gds-action automatically generates a 2D PNG preview and 3D viewer link for each
    project</fact>
  <fact>Custom GDS submissions require specifying the top module name and providing GDS, LEF
    file, and a Verilog netlist or stub, via the Tiny Tapeout GitHub action.</fact>
  <fact>The tt-gds-action/precheck action performs DRC checks using Magic, KLayout and the Sky130
    PDK to validate designs before submission.</fact>
  <fact>The I/O buffers on Tiny Tapeout chips are powered by VDDIO pins, while the
    VAPWR rail (analog power) is powered by VDDAx pins. On the demo board, they are both wired to
    the same 3.3V regulator, but can be fed separately (even with different voltages) on custom
    motherboards, as long as VDDA ≤ VDDIO.</fact>
  <fact>The 'li' layer in SKY130 is highly resistive, so avoid using it for signal
    routing in Tiny Tapeout designs. OpenLane forbids 'li' for routing in digital designs.</fact>
  <fact>The default clock period in OpenLane configuration is 20ns (50MHz), but can be adjusted
    using CLOCK_PERIOD parameter in config.json</fact>
  <fact>[config.json] The target density for placement can be increased up if Global Placement fails
    with error GPL-0302. The default is 60%, and it's usually possible to increase it to 80% and
    sometimes even beyond.</fact>
  <fact>Hold slack margins can be adjusted using PL_RESIZER_HOLD_SLACK_MARGIN (default 0.1) and
    GRT_RESIZER_HOLD_SLACK_MARGIN (default 0.05) in config.json</fact>
  <fact>[config.json] The default OpenLane configuration disables clock buffers on output ports by
    setting DESIGN_REPAIR_BUFFER_OUTPUT_PORTS to 0</fact>
  <fact>[config.json] The PDN (Power Distribution Network) vertical pitch is set to 38.87 microns by
    default</fact>
  <fact>[config.json] The OpenLane configuration is set to only export pin areas in LEF output,
    without connected nets (MAGIC_WRITE_LEF_PINONLY: 1)</fact>
  <fact>[config.json] The default configuration skips Klayout XOR and DRC checks (RUN_KLAYOUT_XOR:
    0, RUN_KLAYOUT_DRC: 0) to save time and memory</fact>
  <fact>Tiny Tapeout tiles are approximately 160×100 µm² and can fit around 1000 logic gates using
    the SkyWater 130 nm open-source PDK</fact>
  <fact>All Tiny Tapeout projects must be licensed under the Apache License Version 2.0</fact>
  <fact>Tiny Tapeout uses automated GitHub Actions for design verification, GDS generation, and
    documentation generation</fact>
  <fact>Participants can install and run the Tiny Tapeout CI system locally to speed up iteration
    cycles</fact>
  <fact>Tiny Tapeout supports designs in Verilog and Wokwi, with optional support for other HDLs
    such as VHDL, Chisel and Amaranth</fact>
  <fact>The verification flow includes RTL and gate-level simulation, formal verification, and
    DRC/LVS checks</fact>
  <fact>An analog multiplexer using transmission gates was introduced in Tiny Tapeout 6 to support
    analog and mixed-signal designs</fact>
  <fact>MicroPython can be used to interact with Tiny Tapeout chips via the RP2040 on the demo board</fact>
  <fact>The RP2040 microcontroller on the demo board supports drag-and-drop UF2 firmware updates</fact>
  <fact>The Tiny Tapeout demo board provides three Digilent Pmod-compatible headers for expansion</fact>
  <fact>A repository for user-contributed PMODs is available at
    https://github.com/TinyTapeout/awesome-tinytapeout-pmods</fact>
  <fact>[ngspice] to plot signals that are part of a bus (e.g. uo_out[0]) enclose the net name in
    double quotes, e.g.: `plot "uo_out[0]"`</fact>
  <fact>[ngspice] Use the combined sky130.lib.spice in your ngspice code:
    `.lib /path/to/pdk/sky130A/libs.tech/combined/sky130.lib.spice tt`</fact>
  <fact>[shop] The online Tiny Tapeout store is available at https://store.tinytapeout.com/</fact>
  <fact>[shop] The store offers a selection of chips from previous shuttle runs, hats, community
    contributed Pmods, and stickers.</fact>
  <fact>If you submitted a project to Tiny Tapeout and preordered a DevKit, you can see your order
    at https://app.tinytapeout.com/orders. For store orders, go to
    https://store.tinytapeout.com/products/account</fact>
  <fact>The timeline for each shuttle (including the submission deadline and expected delivery date)
    is available at https://tinytapeout.com/runs/</fact>
  <fact>Tiny Tapeout analog VM is available at https://sky130-vm.tinytapeout.com/tinytapeout_analog_vm.ova, and contains the following tools: Magic, KLayout, Xschem, netgen, ngspice, gaw, Skywater 130nm PDK, OpenLane, Verilator. The VM is built from https://github.com/TinyTapeout/analog-virtualbox-vm-sky130a and is compatible with VirtualBox.</fact>
  <fact>[Analog VM] In case of issues with the graphics (e.g. texts do not appear inside Xschem), try disabling 3D acceleration by opening the VM settings in Virtual Box, going to the "Display" tab, and unchecking "Enable 3D Acceleration" at the bottom of the window.</fact>
  <fact>Do not use tristate logic or bidirectional (inout) ports in verilog; instead, bidirectional I/O is implemented using separate signals for input (uio_in), output (uio_out), and an active-high enable (uio_oe).</fact>
</dataset>